{"version":3,"sources":["webpack:///./src/templates/blog-post.js"],"names":["BlogPost","props","episodes","transformEpisodesData","data","relatedEpisodes","edges","posts","transformPostsData","relatedPosts","post","strapiPost","postHeader","useRef","useEffect","links","document","querySelectorAll","images","forEach","link","classList","add","image","parentElement","style","textAlign","p","innerHTML","figure","createElement","figcaption","figcaptionText","createTextNode","getAttribute","appendChild","className","title","src","mainImage","childImageSharp","fixed","width","height","description","keywords","keyword","map","item","ref","category","name","toJalaliDate","Date","created_at","createFullName","author","firstName","lastName","toPersianNumber","fields","readingTime","fluid","alt","source","content","transformImageUri","uri","startsWith","process","IMAGE_BASE_URL","resources","length","resource","href","url","target","toTitleCase","backgroundColor","color","icon","episode","tagComponent","children","tag","standalone","slice","index","key","overlayColor","to","slugify","people","person","shownName","join"],"mappings":"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","file":"component---src-templates-blog-post-js-eb288beb13480fa16257.js","sourcesContent":["import React, { useEffect, useRef } from \"react\"\nimport Img from \"gatsby-image\"\nimport { graphql, Link } from \"gatsby\"\nimport ReactMarkdown from \"react-markdown\"\n\nimport { PostCard } from \"../components/Lib\"\nimport {\n  toTitleCase,\n  transformEpisodesData,\n  transformPostsData,\n} from \"../utils/helpers\"\nimport SEO from \"../components/seo\"\nimport {\n  ActionBar,\n  Button,\n  Header,\n  Container,\n  Section,\n  Footer,\n  Icon,\n  EpisodeCard,\n  Heading,\n  Tag,\n} from \"../components/Lib\"\nimport {\n  toJalaliDate,\n  toPersianNumber,\n  createFullName,\n  slugify,\n} from \"../utils/helpers\"\n\nconst BlogPost = props => {\n  const episodes = transformEpisodesData(props.data.relatedEpisodes.edges)\n  const posts = transformPostsData(props.data.relatedPosts.edges)\n  const post = props.data.strapiPost\n  const relatedEpisodes = props.data.relatedEpisodes.edges\n  let relatedPosts = props.data.relatedPosts.edges\n  const postHeader = useRef()\n  useEffect(() => {\n    const links = document.querySelectorAll(\".article__content a\")\n    const images = document.querySelectorAll(\".article__content img\")\n    links.forEach(link => {\n      link.classList.add(\"link\")\n    })\n    images.forEach(image => {\n      image.parentElement.style.textAlign = \"center\"\n      const p = image.parentElement\n      p.innerHTML = \"\"\n      const figure = document.createElement(\"figure\")\n      figure.classList.add(\"article__content__figure\")\n      const figcaption = document.createElement(\"figcaption\")\n      const figcaptionText = document.createTextNode(\n        image.getAttribute(\"alt\") ? image.getAttribute(\"alt\") : \" \"\n      )\n      figcaption.appendChild(figcaptionText)\n      figure.appendChild(image)\n      figure.appendChild(figcaption)\n      p.appendChild(figure)\n    })\n  }, [])\n  return (\n    <Container className=\"blog_post\">\n      <SEO\n        title={post.title}\n        image={{\n          src: post?.mainImage?.childImageSharp.fixed.src,\n          width: post?.mainImage?.childImageSharp.fixed.width,\n          height: post?.mainImage?.childImageSharp.fixed.height,\n        }}\n        description={post.description}\n        keywords={post.keyword.map(item => item.title)}\n      />\n      <Header className=\"header--lightgray\" />\n      <main className=\"article\">\n        <header ref={postHeader} className=\"article__header\">\n          <div className=\"article__header__wrapper\">\n            <div className=\"article__category\">{post.category.name}</div>\n            <h1 className=\"article__title\">{post.title}</h1>\n            <section className=\"article__info\">\n              <div>\n                <Icon name=\"calendar\" />\n                {toJalaliDate(new Date(post.created_at))}\n              </div>\n              <div>\n                <Icon name=\"feather\" />\n                {createFullName(post.author.firstName, post.author.lastName)}\n              </div>\n              <div>\n                <Icon name=\"clock\" />\n                {`${toPersianNumber(post.fields.readingTime)}  دقیقه`}\n              </div>\n            </section>\n            <figure className=\"article__figure\">\n              <Img\n                fluid={post?.mainImage?.childImageSharp.fluid}\n                className=\"article__image\"\n                alt={post.title}\n              />\n            </figure>\n          </div>\n        </header>\n        <article className=\"article__content\">\n          <ReactMarkdown\n            source={post.content}\n            transformImageUri={uri =>\n              uri.startsWith(\"http\")\n                ? uri\n                : `${process.env.IMAGE_BASE_URL}${uri}`\n            }\n          />\n        </article>\n        {post.resources && (\n          <div className=\"article__resources\">\n            <h4>{post.resources.length > 1 ? \"منابع\" : \"منبع\"}</h4>\n            <ul>\n              {post.resources.map(resource => (\n                <li>\n                  <a\n                    href={resource.url}\n                    target=\"_blank\"\n                    className=\"fancy_link english_font\"\n                  >\n                    {toTitleCase(resource.title)}\n                  </a>\n                </li>\n              ))}\n            </ul>\n          </div>\n        )}\n        <Section backgroundColor=\"var(--lightgray)\">\n          <Heading color=\"gray\" title=\"مطالعه بیشتر...\" icon=\"file_plus\" />\n          <div className=\"article__more\">\n            <div className=\"article__more__box\">\n              {episodes.length >= 0 && (\n                <>\n                  {episodes.map(episode => (\n                    <EpisodeCard\n                      className=\"episode-card\"\n                      tagComponent={\n                        <Tag color=\"black\" children=\"اپیزود مرتبط\" />\n                      }\n                      tag=\"Link\"\n                      item={episode}\n                      standalone\n                    />\n                  ))}\n                </>\n              )}\n              {posts.length > 0 &&\n                // 4 is the number of cards in a row at desktop mode\n                posts.slice(0, 4 - episodes.length).map((item, index) => {\n                  return (\n                    <PostCard\n                      className=\"post-card\"\n                      tagComponent={<Tag color=\"white\" children=\"نوشته بلاگ\" />}\n                      standalone\n                      tag=\"Link\"\n                      key={index}\n                      item={item}\n                      overlayColor=\"--primary\"\n                    />\n                  )\n                })}\n            </div>\n            {posts.length > 4 - episodes.length && (\n              <div className=\"article__more__action\">\n                <Link\n                  className=\"navigator\"\n                  to={`/blog/tag/${slugify(\n                    post.people.map(person => person.shownName).join(\" و \")\n                  )}`}\n                >\n                  <Button color=\"primary-outlined\">\n                    مشاهده همه نوشته‌های مرتبط با{\" \"}\n                    {post.people.map(person => person.shownName).join(\" و \")}\n                  </Button>\n                </Link>\n              </div>\n            )}\n          </div>\n        </Section>\n      </main>\n      <Footer />\n      <ActionBar />\n    </Container>\n  )\n}\n\nexport const query = graphql`\n  query($slug: String!, $people: [Int]!) {\n    strapiPost(fields: { slug: { eq: $slug } }) {\n      created_at\n      title\n      content\n      resources {\n        url\n        title\n      }\n      category {\n        name\n      }\n      people {\n        shownName\n      }\n      author {\n        firstName\n        lastName\n      }\n      keyword {\n        title\n      }\n      fields {\n        slug\n      }\n      description\n      mainImage {\n        childImageSharp {\n          fixed {\n            src\n            width\n            height\n          }\n          fluid {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n      fields {\n        readingTime\n      }\n    }\n    relatedEpisodes: allStrapiEpisode(\n      sort: { fields: releaseDate, order: DESC }\n      filter: { people: { elemMatch: { id: { in: $people } } } }\n      limit: 5\n    ) {\n      edges {\n        node {\n          mainImage {\n            childImageSharp {\n              fixed {\n                height\n                src\n                width\n              }\n              fluid {\n                src\n              }\n            }\n          }\n          releaseDate\n          title\n          episodeNumber\n          fields {\n            slug\n          }\n        }\n      }\n    }\n    relatedPosts: allStrapiPost(\n      sort: { fields: created_at, order: DESC }\n      filter: { people: { elemMatch: { id: { in: $people } } } }\n      limit: 4\n    ) {\n      edges {\n        node {\n          title\n          created_at\n          fields {\n            slug\n          }\n          mainImage {\n            childImageSharp {\n              fluid {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n//\n\nexport default BlogPost\n"],"sourceRoot":""}