{"version":3,"sources":["webpack:///./src/components/Slider.js","webpack:///./src/components/WhereToListen.js","webpack:///./src/pages/index.js"],"names":["Slider","items","type","counts","slice","Type","post","card","PostCard","button","ReadButton","route","content","episode","EpisodeCard","ListenToButton","useState","slide","setSlide","sliderTitle","useRef","sliderPattern","nextRef","previousRef","className","to","slug","ref","title","Tag","block","map","item","index","offset","length","style","transform","tag","key","id","current","overlayColor","onClick","name","prev","WhereToListen","color","target","href","IndexPage","data","console","log","allEpisodes","episodes","transformEpisodesData","edges","posts","transformPostsData","allPosts","description","keywords","pushed","lastEpisode","Section","size","iconName","backgroundColor","Footer"],"mappings":"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","file":"component---src-pages-index-js-891d8865eed638655f0c.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\"\nimport { Link } from \"gatsby\"\nimport {\n  ListenToButton,\n  ReadButton,\n  EpisodeCard,\n  PostCard,\n  Icon,\n  Button,\n} from \"./Lib\"\n\n// const initialState = {\n//   slides: [],\n//   index: 0,\n// }\n\n// const sliderReducer = (state, action) => {\n//   switch (action.type) {\n//     case \"NEXT\":\n//       return {\n//         ...state,\n//         index: (state.index + 1) % state.slides.length,\n//       }\n//     case \"PREVIOUS\":\n//       return {\n//         ...state,\n//         index: state.index - 1 < 0 ? state.slides.length : state.index - 1,\n//       }\n//   }\n// }\n\nconst Slider = ({ items, counts, type }) => {\n  items = items.slice(0, 4)\n  const types = {\n    post: {\n      card: PostCard,\n      button: ReadButton,\n      route: \"blog\",\n      content: \"content\",\n    },\n    episode: {\n      card: EpisodeCard,\n      button: ListenToButton,\n      route: \"episode\",\n      content: \"text\",\n    },\n  }\n  const Type = types[type]\n\n  const [slide, setSlide] = useState(0)\n\n  const sliderTitle = useRef()\n  const sliderPattern = useRef()\n  const nextRef = useRef()\n  const previousRef = useRef()\n\n  // useEffect(() => {\n  //   const sliderInterval = setInterval(next, 10000)\n  //   return () => {\n  //     clearInterval(sliderInterval)\n  //   }\n  // }, [])\n  const next = () => {\n    setSlide(slide => (slide + 1) % items.length)\n  }\n\n  const previous = () => {\n    setSlide(prev => (prev === 0 ? items.length - 1 : prev - 1))\n  }\n\n  return (\n    <div className={`${type}s_slider`}>\n      <div className=\"slider\">\n        <div className=\"slider__current\">\n          <div className=\"slider__information\">\n            <Link\n              to={`/${Type.route}/${items[slide].slug}`}\n              className=\"navigator\"\n            >\n              <h3 className=\"slider__title\" ref={sliderTitle}>\n                <span>{items[slide].title}</span>\n              </h3>\n            </Link>\n            <Type.button\n              to={`/${Type.route}/${items[slide].slug}`}\n              Tag=\"Link\"\n              block\n            />\n          </div>\n          <div className=\"slider__pattern\" ref={sliderPattern}>\n            {items[slide][Type.content]}\n          </div>\n        </div>\n        <div className=\"slider__slides\">\n          {items.map((item, index) => {\n            let offset =\n              (index - slide >= 0\n                ? index - slide\n                : index - slide + items.length) * 266\n            return (\n              <Type.card\n                // 266 = card with  + margin => 250 + 16\n                style={{\n                  transform: `translate3d(${\n                    Type.route == \"episode\" ? \"-\" : \"\"\n                  }${offset}px,0,0)`,\n                }}\n                tag=\"Link\"\n                key={index}\n                index={index}\n                id={item.id}\n                item={item}\n                current={index === slide}\n                overlayColor=\"--black\"\n                offset={offset}\n              />\n            )\n          })}\n        </div>\n      </div>\n      <div className=\"slider__buttons\">\n        <button className=\"slider__button\" onClick={next} ref={nextRef}>\n          <Icon name=\"arrow_right\" />\n        </button>\n        <button className=\"slider__button\" onClick={previous} ref={previousRef}>\n          <Icon name=\"arrow_left\" />\n        </button>\n      </div>\n    </div>\n  )\n}\n\nexport default Slider\n","import React from \"react\"\nimport {\n  SnakePanel,\n  App_ApplePodcast,\n  App_CastBox,\n  App_Spotify,\n  App_Overcast,\n  App_GooglePodcast,\n} from \"./Lib\"\n\nconst WhereToListen = () => {\n  return (\n    <SnakePanel color=\"gradient\">\n      <div className=\"listen_to\">\n        <div className=\"listen_to__title\">از کجا بشنویم؟</div>\n        <div className=\"listen_to__logos\">\n          <a\n            className=\"navigator\"\n            target=\"_blank\"\n            href=\"https://castbox.fm/channel/BioCast-%7C-%D8%A8%D8%A7%DB%8C%D9%88%DA%A9%D8%B3%D8%AA-id2769822?country=ir\"\n          >\n            <App_CastBox />\n          </a>\n          <a\n            className=\"navigator\"\n            target=\"_blank\"\n            href=\"https://podcasts.google.com/feed/aHR0cHM6Ly9hbmNob3IuZm0vcy83Yzg4ZTg4L3BvZGNhc3QvcnNz\"\n          >\n            <App_GooglePodcast />\n          </a>\n          <a\n            className=\"navigator\"\n            target=\"_blank\"\n            href=\"https://open.spotify.com/show/4MMISSUGttGxTZp57mi5YC\"\n          >\n            <App_Spotify />\n          </a>\n          <a\n            className=\"navigator\"\n            target=\"_blank\"\n            href=\"https://podcasts.apple.com/us/podcast/biocast-%D8%A8%D8%A7%DB%8C%D9%88%DA%A9%D8%B3%D8%AA/id1443799089\"\n          >\n            <App_ApplePodcast />\n          </a>\n          <a\n            className=\"navigator\"\n            target=\"_blank\"\n            href=\"https://overcast.fm/itunes1443799089/biocast\"\n          >\n            <App_Overcast />\n          </a>\n        </div>\n      </div>\n    </SnakePanel>\n  )\n}\n\nexport default WhereToListen\n","import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport Img from \"gatsby-image\"\n\nimport { Container, Button, HeroCover, Header } from \"../components/Lib\"\nimport SEO from \"../components/seo\"\n\nimport Slider from \"../components/Slider\"\nimport Section from \"../components/lib/Section\"\nimport WhereToListen from \"../components/WhereToListen\"\nimport Footer from \"../components/Footer\"\n\nimport { transformEpisodesData, transformPostsData } from \"../utils/helpers\"\n\nconst IndexPage = ({ data }) => {\n  console.log(data.allEpisodes)\n  const episodes = transformEpisodesData(data.allEpisodes.edges)\n  const posts = transformPostsData(data.allPosts.edges)\n  return (\n    <Container>\n      <SEO\n        title=\"پادکست زندگینامه افراد موفق\"\n        description=\"ما در پادکست فارسی بایوکست، داستان زندگی افراد موفقی رو تعریف می‌کنیم که\n            بر موانع و سختی‌های زندگیشون چیره شدن و تاثیر بزرگی از خودشون به جا\n            گذاشتند.\"\n        keywords={[\n          \"biocast\",\n          \"بایوکست\",\n          \"پادکست زندگینامه\",\n          \"زندگینامه افراد موفق\",\n        ]}\n      />\n      <Header pushed className=\"header--lightgray header--home\" />\n      <HeroCover lastEpisode={episodes[0]} />\n      <WhereToListen />\n      <Section>\n        <div className=\"section__header\">\n          <h2 className=\"latest_episodes__title\">جدیدترین اپیزود‌ها</h2>\n          <Button\n            Tag=\"link\"\n            to=\"/episodes/\"\n            className=\"latest_episodes__more\"\n            size=\"small\"\n            color=\"gray-outlined\"\n            iconName=\"list\"\n          >\n            مشاهده همه اپیزود‌ها\n          </Button>\n        </div>\n        <Slider type=\"episode\" items={episodes.slice(1)} />\n      </Section>\n      <Section backgroundColor=\"var(--lightgray)\" className=\"latest_posts\">\n        <div className=\"section__header\">\n          <h2 className=\"latest_episodes__title\">جدیدترین نوشته‌ها</h2>\n          <Button\n            className=\"latest_episodes__more\"\n            size=\"small\"\n            color=\"gray-outlined\"\n            iconName=\"list\"\n            Tag=\"link\"\n            to=\"/blog/all\"\n          >\n            مشاهده همه نوشته‌ها\n          </Button>\n        </div>\n        <Slider type=\"post\" items={posts} />\n      </Section>\n      <Footer />\n    </Container>\n  )\n}\n\nexport default IndexPage\n\nexport const query = graphql`\n  query {\n    allEpisodes: allStrapiEpisode(\n      limit: 5\n      sort: { fields: episodeNumber, order: DESC }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          created_at\n          id\n          title\n          strapiId\n          mainImage {\n            childImageSharp {\n              fluid {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n          squareImage {\n            childImageSharp {\n              fluid {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n          description\n          text\n          episodeNumber\n        }\n      }\n    }\n    allPosts: allStrapiPost(\n      limit: 4\n      sort: { fields: created_at, order: DESC }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          id\n          title\n          description\n          content\n          mainImage {\n            childImageSharp {\n              fluid {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n          content\n          created_at\n          imagePosition\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}